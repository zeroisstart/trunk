שלד האפליקציה
====================

בחלק זה, אנו מתארים כיצד ליצור שלד אפליקציה אשר ישרת אותנו כנקודת ההתחלה. כדי לפשט את התהליך, אנו מניחים שהתיקיה הראשית של השרת שלנו (תיקית ה-www) הינה `/wwwroot' והכתובת המקבילה לתיקיה זו הינה `http://www.example.com/`.


התקנת Yii
--------------

אנו קודם מתקינים את הפריימוורק. גשו לעמוד ההורדה באתר [www.yiiframework.com](http://www.yiiframework.com/download) והורידו את הגרסא של Yii (גרסא 1.1.1 ומעלה) וחלצו את הקבצים לתיקיה `/wwwroot/yii`. אנא וודאו שישנה תיקיה `/wwwroot/yii/framework`.

> Tip|טיפ: ניתן להתקין את Yii בכל מקום בשרת, לאו דווקא תחת תיקית הוו (Web Folder). התיקיה `framework` מכילה את כל הקוד הדרוש כדי להריץ אפליקציות ווב הכתובות בעזרת Yii והינה התיקיה היחידה הדרושה להרצת האפליקציות. התקנה אחת של Yii (זאת אומרת תיקיה אחת של `framework` בשרת) ניתנת לשימוש על ידי מספר רב של אפליקציות אשר נכתבו בעזרת Yii.

לאחר התקנת Yii, פתחו את הדפדפן (חלון אינטרנט) וגשו לעמוד בנתב הבא `http://www.example.com/yii/requirements/index.php`. עמוד זה מציג את הדרישות להרצת Yii ואפליקציות אשר נכתבו בעזרתו.
עבור אפליקצית הבלוג שלנו, מלבד דרישות המינימום הנחוצות על ידי Yii, אנו צריכים להפעיל את התוספים של PHP בשם `pdo` ו `pdo_sqlite` כדי שנוכל לגשת למסד נתונים מסוג SQLite.


יצירת שלד האפליקציה
-----------------------------

לאחר מכן אנו משתמשים בכלי `yiic` כדי ליצור את שלד האפליקציה תחת התיקיה `/wwwroot/blog`. הכלי `yiic` הינו כלי לשורת הפקודות אשר מגיע בכל גרסא של Yii. ניתן להשתמש בו כדי לייצר קוד בכדי להפחית את המטלות החוזרות ביצירת קוד החוזר על עצמו שוב ושוב.

פתחו חלון פקודות והריצו את הפקודה הבאה:

~~~
% /wwwroot/yii/framework/yiic webapp /wwwroot/blog
Create a Web application under '/wwwroot/blog'? [Yes|No]y
......
~~~

> Tip|טיפ: בכדי להשתמש בכלי `yiic` כפי שמוצג למעלה, תוכנית ה CLI של PHP צריכה להמצא תחת נתיב החיפוש של שורת הפקודות. במידה והיא לא נמצאת או אינכם מצליחים להריץ את הפקודה המוצגת למעלה, תוכלו להריץ את אותה הפקודה בצורה הבאה:
>
>~~~
> path/to/php /wwwroot/yii/framework/yiic.php webapp /wwwroot/blog
>~~~

בכדי לנסות את האפליקציה שהרגע יצרנו, פתחו חלון דפדפן חדש וגשו לכתובת `http://www.example.com/blog/index.php`. תוכלו לראות ששלד האפליקציה שלנו כבר כולל בתוכו ארבע עמודים פעילים לחלוטין: עמוד הבית, עמוד אודות, עמוד יצירת קשר ועמוד ההתחברות.

בחלק הבא, אנו נסביר בקצרה מה יש לנו בתוך שלד האפליקציה הזה.

###קובץ כניסה ראשי (index.php)

יש ברשותנו את קובץ הכניסה הראשי `/wwwroot/blog/index.php` אשר מכיל בתוכו את הקוד הבא:

~~~
[php]
<?php
$yii='/wwwroot/framework/yii.php';
$config=dirname(__FILE__).'/protected/config/main.php';

// remove the following line when in production mode
defined('YII_DEBUG') or define('YII_DEBUG',true);

require_once($yii);
Yii::createWebApplication($config)->run();
~~~

קובץ זה הינו הקובץ היחידי שמשתמשי הקצה יכולים לגשת אליו ישירות. הקובץ מצרף קודם כל את קובץ ההתחלה הראשי של Yii בשם `yii.php`. לאחר מכן הוא יוצר אובייקט של האפליקציה עם הגדרות האפליקציה שהוגדרו ומריץ את האפליקציה.

###תיקית האפליקציה הראשית

יש ברשותנו גם את תיקית האפליקציה הראשית `/wwwroot/blog/protected`. מרבית הקוד שנכתוב (או ניצור) והנתונים ימוקמו תחת תיקיה זו, ויש להגן עליה מגישה של משתמשי קצה. עבור משתמשי [Apache ](http://httpd.apache.org/), אנו מניחים קובץ בשם `htaccess.` בתיקיה זו המכיל את התוכן הבא:

~~~
deny from all
~~~

עבור שרתי ווב אחרים, אנא קראו את המדריך למשתמש כיצד להגן על תיקיה מפני גישה חיצונית של משתמשי קצה.

רצף עבודת האפליקציה
--------------------

כדי להבין כיצד Yii עובד, אנו מתארים את רצף העבודה הראשי באפליקציה שלנו בעת הכניסה של משתמש לעמוד יצירת הקשר:

0. המשתמש נכנס אל (מבקש את) הקישור `http://www.example.com/blog/index.php?r=site/contact`;
1. קובץ הכניסה הראשי מקבל את הבקשה על ידי שרת הווב כדי לעבד את הבקשה;
2. אובייקט האפליקציה נוצר ומוגדר עם מאפיינים התחלתיים המוגדרים בקובץ הגדרות האפליקציה הנמצא `/wwwroot/blog/protected/config/main.php`;
3. האפליקציה מנתחת את הבקשה לקונטרולר ופעולה בקונטרולר. עבור עמוד יצירת הקשר, הבקשה מנותחת לקונטרולר `site` והפעולה `contact` (המתודה `actionContact` בקובץ `/wwwroot/blog/protected/controllers/SiteController.php`);
4. האפליקציה יוצרת את הקונטרולר `site` במונחים של אובייקט של `siteController` ומריצה אותו;
5. האובייקט של `siteController` מריץ את הפעולה `contact` על ידי קריאה למתודה `actionContact`;
6. המתודה `actionContact` מעבדת קובץ תצוגה בשם `contact` למשתמש הקצה. כלפי פנים המערכת, זה מתבצע על ידי קריאה וצירוף של הקובץ `/wwwroot/blog/protected/views/site/contact.php` והטמעת התוצאה לקובץ התבנית `/wwwroot/blog/protected/views/layouts/column1.php`.

<div class="revision">$Id: start.testdrive.txt 1734 2010-01-21 18:41:17Z qiang.xue $</div>

